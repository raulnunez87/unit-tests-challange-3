name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Job principal: Build, Lint, TypeCheck y Tests con cobertura
  build-test:
    name: Build, Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd wget gnupg
          
          # Install MongoDB Shell (mongosh)
          wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Start MongoDB with Replica Set
        run: |
          echo "Starting MongoDB with replica set configuration..."
          docker run -d --name mongodb-ci \
            -p 27017:27017 \
            -e MONGO_INITDB_DATABASE=auth-module-test \
            mongo:7.0 \
            mongod --replSet rs0 --bind_ip_all
          
          echo "Waiting for MongoDB to start..."
          sleep 10

      - name: Wait for MongoDB and Initialize Replica Set
        run: |
          echo "Waiting for MongoDB to be ready..."
          timeout=30
          counter=0
          until nc -z localhost 27017; do
            if [ $counter -ge $timeout ]; then
              echo "MongoDB failed to start within $timeout seconds"
              exit 1
            fi
            echo "MongoDB not ready yet, waiting... ($counter/$timeout)"
            sleep 2
            counter=$((counter + 2))
          done
          echo "MongoDB is ready!"
          
          # Initialize replica set (required for Prisma)
          echo "Initializing MongoDB replica set..."
          if command -v mongosh &> /dev/null; then
            mongosh --eval "
              try {
                rs.initiate({
                  _id: 'rs0',
                  members: [{ _id: 0, host: 'localhost:27017' }]
                });
                print('Replica set initialization started');
              } catch (e) {
                print('Replica set may already be initialized');
              }
            " --quiet || echo "Replica set initialization attempted"
            
            # Wait for replica set to be ready
            echo "Waiting for replica set to be ready..."
            for i in {1..30}; do
              if mongosh --eval "rs.status().ok" --quiet 2>/dev/null | grep -q "1"; then
                echo "‚úÖ Replica set is ready!"
                break
              fi
              echo "Waiting for replica set... ($i/30)"
              sleep 2
            done
          else
            
            # Fallback initialization
            echo "Initializing replica set (fallback)..."
          fi
          
          # Test MongoDB connection
          echo "Testing MongoDB connection..."
          if command -v mongosh &> /dev/null; then
            mongosh --eval "db.runCommand('ping')" --quiet || {
              echo "MongoDB connection test failed"
              exit 1
            }
            echo "‚úÖ MongoDB connection verified with mongosh!"
          else
            echo "‚ö†Ô∏è mongosh not available, testing with Node.js..."
            # Fallback: test connection with Node.js
            node -e "
              const { MongoClient } = require('mongodb');
              const client = new MongoClient('mongodb://localhost:27017');
              client.connect()
                .then(() => client.db('admin').command({ ping: 1 }))
                .then(() => {
                  console.log('‚úÖ MongoDB connection verified with Node.js!');
                  process.exit(0);
                })
                .catch((err) => {
                  console.error('‚ùå MongoDB connection failed:', err.message);
                  process.exit(1);
                })
                .finally(() => client.close());
            " || {
              echo "MongoDB connection test failed"
              exit 1
            }
          fi

      - name: Lint c√≥digo
        run: npm run lint
        continue-on-error: false

      - name: Type check
        run: npm run typecheck
        continue-on-error: false

      - name: Test database connection
        run: |
          echo "Testing database connection..."
          # Test if MongoDB is accessible via telnet
          timeout 10 bash -c 'cat < /dev/null > /dev/tcp/localhost/27017' && echo "‚úÖ MongoDB port is accessible" || echo "‚ùå MongoDB port is not accessible"
          # Test with curl if available
          curl -f http://localhost:27017 || echo "MongoDB HTTP interface not available (this is normal)"
          echo "‚úÖ Database connection test completed"

      - name: Verify test environment
        run: |
          echo "üîç Verifying test environment..."
          echo "CI: $CI"
          echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
          echo "DATABASE_URL: $DATABASE_URL"
          echo "NODE_ENV: $NODE_ENV"

      - name: Run tests with coverage
        run: npm run test:ci
        env:
          DATABASE_URL: mongodb://localhost:27017/auth-module-test
          JWT_SECRET: test-jwt-secret-that-is-at-least-32-characters-long-for-testing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Cleanup MongoDB
        if: always()
        run: |
          docker stop mongodb-ci || true
          docker rm mongodb-ci || true

  # Job de seguridad: SAST, SCA y DAST
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs.sarif'

      - name: Run Trivy filesystem scan
        run: |
          echo "Running Trivy filesystem scan..."
          trivy fs --format sarif --output trivy-fs.sarif .
          echo "Trivy scan completed"
          ls -la trivy-fs.sarif || echo "SARIF file not found"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-fs.sarif') != ''
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs

      - name: Run Semgrep SAST scan
        run: |
          echo "Running Semgrep SAST scan..."
          npm run sec:sast
          echo "Semgrep scan completed"
          ls -la semgrep-local.sarif || echo "SARIF file not found"

      - name: Upload Semgrep scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('semgrep-local.sarif') != ''
        with:
          sarif_file: semgrep-local.sarif
          category: semgrep

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=high || echo "Audit completed with findings"
          echo "npm audit completed"

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # Job de build y deployment
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [build-test, security]
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start MongoDB for Build
        run: |
          echo "Starting MongoDB for build process..."
          docker run -d --name mongodb-build \
            -p 27017:27017 \
            -e MONGO_INITDB_DATABASE=auth-module-build \
            mongo:7.0 \
            mongod --replSet rs0 --bind_ip_all
          
          echo "Waiting for MongoDB to start..."
          sleep 10
          
          # Initialize replica set
          docker exec mongodb-build mongosh --eval "
            try {
              rs.initiate({
                _id: 'rs0',
                members: [{ _id: 0, host: 'localhost:27017' }]
              });
              print('Replica set initialization started');
            } catch (e) {
              print('Replica set may already be initialized');
            }
          " --quiet || echo "Replica set initialization attempted"

      - name: Build application
        run: npm run build
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-that-is-at-least-32-characters-long' }}
          DATABASE_URL: mongodb://localhost:27017/auth-module-build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
            package.json
            package-lock.json
          retention-days: 7

      - name: Cleanup MongoDB Build
        if: always()
        run: |
          docker stop mongodb-build || true
          docker rm mongodb-build || true

  # Job de notificaciones
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [build-test, security, build]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.build-test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "‚úÖ All checks passed successfully!"
          echo "Pipeline Status: SUCCESS"

      - name: Notify failure
        if: ${{ needs.build-test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "‚ùå Pipeline failed!"
          echo "Build-Test: ${{ needs.build-test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"
          exit 1